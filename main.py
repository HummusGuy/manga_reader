"""
CS231N-zero-shot.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12MXmwKWOMGzfNOsBDt7DaDobGOPoYab5

- Book Title: チェンソーマン (Chainsaw Man) Chapter 1
- Author: 藤本タツキ (Tatsuki Fujimoto)
- Published By: 集英社
- Year: 2019

This Chapter is publicly available on: https://www.shonenjump.com/j/rensai/chainsaw.html

© Tatsuki Fujimoto, 2019

For academic research purpose only.

Bibtex:

@book{Fujimoto2019,
    title = {チェンソーマン (Chainsaw Man) Chapter 1},
    author = {藤本タツキ (Tatsuki Fujimoto)},
    year = {2019},
    publisher = {集英社},
}
"""
import os
from pathlib import Path
from sentence_transformers import SentenceTransformer
import torch
from manga109api import Parser
from manga109utils import Book
from metrics import create_transcript_retrieval_query_set_for_book, paraphrase_query_set, retrieval_eval_metric, save_query_set
from visualization import load_images_from_folder, visualize_scene_retrieval_novel_book
from retrieve import EndToEndTranscriptRetriever, SentBertJapanese, SentBertMultilingual
from model.detr import DetrFrameDetectionModel
import pillow_avif
from tqdm import tqdm
from dotenv import load_dotenv

load_dotenv()

# Assume the Manga109 dataset is already downloaded and unzipped
manga109 = "./datasets/manga109"

# Assume the manga chapter is already downloaded and unzipped
manga_path = "./datasets/chainsawman-ch1"

if not os.path.exists(manga_path):
    raise FileNotFoundError(f"The directory {manga_path} does not exist.")
if not os.listdir(manga_path):
    raise FileNotFoundError(f"The directory {manga_path} is empty.")

# Load the detection model
detection_model_path = './model/frame_text_detection_exclude_dollgun'
model = DetrFrameDetectionModel(detection_model_path)

# Initialize the transcript retriever
transcript_retriever = EndToEndTranscriptRetriever(model)

# Load images from the manga chapter
images = load_images_from_folder(manga_path)
transcript_retriever.index(images)

# Define text queries for dialogue extraction
text_queries = [
    "おい小僧、このタバコを食ったら、100円あげるよ",
    "今月の部分を払わないと死んでもらって",
    "夢を見たいな"
]
# Visualize the results of the dialogue extraction
visualize_scene_retrieval_novel_book(transcript_retriever, images, text_queries)

# Create a query set for evaluation
filter_model = SentenceTransformer('sentence-transformers/paraphrase-xlm-r-multilingual-v1')
book = Book("AisazuNihaIrarenai")  
query_set = create_transcript_retrieval_query_set_for_book(book, filter_model)
print(query_set)
# Evaluate the dialogue extraction
paraphrased_query_set = paraphrase_query_set(query_set, model="gpt-3.5-turbo")

# Evaluate the paraphrased queries
k_list = [1, 5, 10]
results = {}

# Use tqdm to add a progress bar to the evaluation loop
for k in tqdm(k_list, desc="Evaluating dialogue extraction"):
    metric_results = retrieval_eval_metric(transcript_retriever, paraphrased_query_set['queries'], paraphrased_query_set['expected'], [k])
    results[f'MRR@{k}'] = metric_results[f'MRR@{k}']
    results[f'avg success@{k}'] = metric_results[f'avg success@{k}']

# Print the results
for k in k_list:
    print(f"MRR@{k}: {results[f'MRR@{k}']}")
    print(f"Average Success@{k}: {results[f'avg success@{k}']}")

# Save the paraphrased query set for future use
save_query_set(paraphrased_query_set, "paraphrased_query_set.json")
save_query_set(query_set, "query_set.json")